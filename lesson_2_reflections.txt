What happens when you initialize a repository? Why do you need to do it?

Initializing a repository creates the .git folder and creates all the 
files you need to start tracking your project. It's necessary to set up
git; you can't track your files without installing the file tracker
first.

How is the staging area different from the working directory and the
repository? What value do you think it offers?

The staging area acts as a medium in between the working directory and
the repository. It allows you to see and evaluate the changes in any
given commit before you--well, commit it. This is useful because it
gives you a chance to reflect on and change what you're committing
before it's accomplished. I actually decided to modify my last commit
while it was in the staging area; if there weren't a staging area, it
would have been too late. Just having that extra step helps you to stop
and think.

Besides, I guess without the staging area, it would be impossible to
store the current state of your working directory in multiple commits.
You would have to store all of it, or none of it.

How can you use the staging area to make sure you have one commit per
logical change?

Well, files in the staging area can easily be compared to alternate
versions in either the working directory or the repository with git
diff. This makes it really easy to see what, exactly, will be changed
with each commit, so you can make sure everything you want (and nothing
you don't) makes it in.

What are some situations when branches would be helpful in keeping your
history organized? How would branches help?

Oh boy. Basically any time you want to add a new feature, or attempt
something which may not work, it would be good to do it in a branch.
Especially if you're trying to modify live code, you *have* to do
development in a branch. That way, you still have a copy of the live
version to modify if a bug turns up, or something like that. It keeps
your speculation separate from your execution, you know?

Not to mention, if you ever have more than one person working on a
project, or if you ever want to work on more than one feature at once,
you pretty much need to branch. Otherwise things just get too tangled
up.

How do the diagrams help you visualize the branch structure?

Dude, that's how my brain works. I'm a visual creature. Drawing it
doesn't change much; it was already a branching tree to me.

They look cool though! And actually, now that I think of it, the
act of drawing arrows (to represent each commit's reference to its
parent) makes it clearer how they're connected to each other. In my
imagination, the branches were solid, and I kind of expected the con-
nections to be two-way. So I wouldn't have expected the whole "detached
head" situation to be a thing. But the arrows make that clearer.

What is the result of merging two branches together? Why do we represent
it in the diagram the way we do?

Merging two branches combines their changes into a single branch, so
that both work histories are able to contribute to a single project.
It's represented on the diagram as two paths combining, because two
histories and two workflows are in fact recombining into a single
history and a single body of work.

What are the pros and cons of Git's automatic merging vs. always doing
merges manually?

Pros: doesn't require you to literally duplicate the work of an entire
branch
Cons: sometimes you have to resolve a confusing merge conflict or talk
to a coworker

I think the Ayes have it, yeah?


